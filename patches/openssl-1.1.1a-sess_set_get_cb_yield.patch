diff --git a/include/openssl/bio.h b/include/openssl/bio.h
index 2888b42..da159e2 100644
--- a/include/openssl/bio.h
+++ b/include/openssl/bio.h
@@ -219,6 +219,8 @@ void BIO_clear_flags(BIO *b, int flags);
 /* Returned from the accept BIO when an accept would have blocked */
 # define BIO_RR_ACCEPT                   0x03
 
+# define BIO_RR_SSL_SESSION_LOOKUP       0x04
+
 /* These are passed by the BIO callback */
 # define BIO_CB_FREE     0x01
 # define BIO_CB_READ     0x02
diff --git a/include/openssl/ssl.h b/include/openssl/ssl.h
index d6b1b4e..19da1ba 100644
--- a/include/openssl/ssl.h
+++ b/include/openssl/ssl.h
@@ -883,6 +883,7 @@ __owur int SSL_extension_supported(unsigned int ext_type);
 # define SSL_ASYNC_PAUSED       5
 # define SSL_ASYNC_NO_JOBS      6
 # define SSL_CLIENT_HELLO_CB    7
+# define SSL_SESS_LOOKUP        8
 
 /* These will only be used when doing non-blocking IO */
 # define SSL_want_nothing(s)         (SSL_want(s) == SSL_NOTHING)
@@ -892,6 +893,7 @@ __owur int SSL_extension_supported(unsigned int ext_type);
 # define SSL_want_async(s)           (SSL_want(s) == SSL_ASYNC_PAUSED)
 # define SSL_want_async_job(s)       (SSL_want(s) == SSL_ASYNC_NO_JOBS)
 # define SSL_want_client_hello_cb(s) (SSL_want(s) == SSL_CLIENT_HELLO_CB)
+# define SSL_want_sess_lookup(s)     (SSL_want(s) == SSL_SESS_LOOKUP)
 
 # define SSL_MAC_FLAG_READ_MAC_STREAM 1
 # define SSL_MAC_FLAG_WRITE_MAC_STREAM 2
@@ -1177,6 +1179,8 @@ DECLARE_PEM_rw(SSL_SESSION, SSL_SESSION)
 # define SSL_ERROR_WANT_ASYNC            9
 # define SSL_ERROR_WANT_ASYNC_JOB       10
 # define SSL_ERROR_WANT_CLIENT_HELLO_CB 11
+# define SSL_ERROR_WANT_SESSION_LOOKUP  12
+# define SSL_ERROR_PENDING_SESSION      12 /* BoringSSL compatibility */
 # define SSL_CTRL_SET_TMP_DH                     3
 # define SSL_CTRL_SET_TMP_ECDH                   4
 # define SSL_CTRL_SET_TMP_DH_CB                  6
@@ -1649,6 +1653,7 @@ int SSL_SESSION_print(BIO *fp, const SSL_SESSION *ses);
 int SSL_SESSION_print_keylog(BIO *bp, const SSL_SESSION *x);
 int SSL_SESSION_up_ref(SSL_SESSION *ses);
 void SSL_SESSION_free(SSL_SESSION *ses);
+SSL_SESSION *SSL_magic_pending_session_ptr(void);
 __owur int i2d_SSL_SESSION(SSL_SESSION *in, unsigned char **pp);
 __owur int SSL_set_session(SSL *to, SSL_SESSION *session);
 int SSL_CTX_add_session(SSL_CTX *ctx, SSL_SESSION *session);
diff --git a/ssl/bio_ssl.c b/ssl/bio_ssl.c
index d1876d8..c59bb2a 100644
--- a/ssl/bio_ssl.c
+++ b/ssl/bio_ssl.c
@@ -139,6 +139,10 @@ static int ssl_read(BIO *b, char *buf, size_t size, size_t *readbytes)
         BIO_set_retry_special(b);
         retry_reason = BIO_RR_SSL_X509_LOOKUP;
         break;
+    case SSL_ERROR_WANT_SESSION_LOOKUP:
+        BIO_set_retry_special(b);
+        retry_reason = BIO_RR_SSL_SESSION_LOOKUP;
+        break;
     case SSL_ERROR_WANT_ACCEPT:
         BIO_set_retry_special(b);
         retry_reason = BIO_RR_ACCEPT;
@@ -207,6 +211,10 @@ static int ssl_write(BIO *b, const char *buf, size_t size, size_t *written)
         BIO_set_retry_special(b);
         retry_reason = BIO_RR_SSL_X509_LOOKUP;
         break;
+    case SSL_ERROR_WANT_SESSION_LOOKUP:
+        BIO_set_retry_special(b);
+        retry_reason = BIO_RR_SSL_SESSION_LOOKUP;
+        break;
     case SSL_ERROR_WANT_CONNECT:
         BIO_set_retry_special(b);
         retry_reason = BIO_RR_CONNECT;
@@ -361,6 +369,10 @@ static long ssl_ctrl(BIO *b, int cmd, long num, void *ptr)
             BIO_set_retry_special(b);
             BIO_set_retry_reason(b, BIO_RR_SSL_X509_LOOKUP);
             break;
+        case SSL_ERROR_WANT_SESSION_LOOKUP:
+            BIO_set_retry_special(b);
+            BIO_set_retry_reason(b, BIO_RR_SSL_SESSION_LOOKUP);
+            break;
         default:
             break;
         }
diff --git a/ssl/ssl_lib.c b/ssl/ssl_lib.c
index 61a0ea2..06e679a 100644
--- a/ssl/ssl_lib.c
+++ b/ssl/ssl_lib.c
@@ -3337,6 +3337,9 @@ int ssl_check_srvr_ecc_cert_and_alg(X509 *x, SSL *s)
                    SSL_R_ECC_CERT_NOT_FOR_SIGNING);
             return 0;
         }
+        if (SSL_want_sess_lookup(s)) {
+            return SSL_ERROR_WANT_SESSION_LOOKUP;
+        }
     }
     return 1;                   /* all checks are ok */
 }
diff --git a/ssl/ssl_sess.c b/ssl/ssl_sess.c
index 5ad2792..fa2b8af 100644
--- a/ssl/ssl_sess.c
+++ b/ssl/ssl_sess.c
@@ -16,6 +16,8 @@
 #include "ssl_locl.h"
 #include "statem/statem_locl.h"
 
+static const char g_pending_session_magic = 0;
+
 static void SSL_SESSION_list_remove(SSL_CTX *ctx, SSL_SESSION *s);
 static void SSL_SESSION_list_add(SSL_CTX *ctx, SSL_SESSION *s);
 static int remove_session_lock(SSL_CTX *ctx, SSL_SESSION *c, int lck);
@@ -476,6 +478,10 @@ SSL_SESSION *lookup_sess_in_cache(SSL *s, const unsigned char *sess_id,
 
         ret = s->session_ctx->get_session_cb(s, sess_id, sess_id_len, &copy);
 
+        if (ret == SSL_magic_pending_session_ptr()) {
+            return -2; /* Retry later */
+        }
+
         if (ret != NULL) {
             tsan_counter(&s->session_ctx->stats.sess_cb_hit);
 
@@ -989,6 +995,11 @@ X509 *SSL_SESSION_get0_peer(SSL_SESSION *s)
     return s->peer;
 }
 
+SSL_SESSION *SSL_magic_pending_session_ptr(void)
+{
+    return (SSL_SESSION *) &g_pending_session_magic;
+}
+
 int SSL_SESSION_set1_id_context(SSL_SESSION *s, const unsigned char *sid_ctx,
                                 unsigned int sid_ctx_len)
 {
diff --git a/ssl/statem/statem.c b/ssl/statem/statem.c
index f76c0e4..91578c3 100644
--- a/ssl/statem/statem.c
+++ b/ssl/statem/statem.c
@@ -626,16 +626,18 @@ static SUB_STATE_RETURN read_state_machine(SSL *s)
             }
 
             s->first_packet = 0;
-            if (!PACKET_buf_init(&pkt, s->init_msg, len)) {
+
+            st->read_state = READ_STATE_PROCESS;
+            /* Fall through */
+
+        case READ_STATE_PROCESS:
+            if (!PACKET_buf_init(&pkt, s->init_msg, s->init_num)) {
                 SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_READ_STATE_MACHINE,
                          ERR_R_INTERNAL_ERROR);
                 return SUB_STATE_ERROR;
             }
             ret = process_message(s, &pkt);
 
-            /* Discard the packet data */
-            s->init_num = 0;
-
             switch (ret) {
             case MSG_PROCESS_ERROR:
                 check_fatal(s, SSL_F_READ_STATE_MACHINE);
@@ -656,6 +658,9 @@ static SUB_STATE_RETURN read_state_machine(SSL *s)
                 st->read_state = READ_STATE_HEADER;
                 break;
             }
+
+            /* Discard the packet data */
+            s->init_num = 0;
             break;
 
         case READ_STATE_POST_PROCESS:
diff --git a/ssl/statem/statem.h b/ssl/statem/statem.h
index 144d930..8aa14e7 100644
--- a/ssl/statem/statem.h
+++ b/ssl/statem/statem.h
@@ -60,6 +60,7 @@ typedef enum {
 typedef enum {
     READ_STATE_HEADER,
     READ_STATE_BODY,
+    READ_STATE_PROCESS,
     READ_STATE_POST_PROCESS
 } READ_STATE;
 
diff --git a/ssl/statem/statem_srvr.c b/ssl/statem/statem_srvr.c
index e7c11c4..114b649 100644
--- a/ssl/statem/statem_srvr.c
+++ b/ssl/statem/statem_srvr.c
@@ -1806,6 +1806,10 @@ static int tls_early_post_process_client_hello(SSL *s)
         } else if (i == -1) {
             /* SSLfatal() already called */
             goto err;
+        } else if (i == -2) {
+            s->rwstate = SSL_SESS_LOOKUP;
+            s->statem.read_state_work = WORK_MORE_A;
+            return MSG_PROCESS_ERROR;
         } else {
             /* i == 0 */
             if (!ssl_get_new_session(s, 1)) {
@@ -1813,6 +1817,7 @@ static int tls_early_post_process_client_hello(SSL *s)
                 goto err;
             }
         }
+        s->rwstate = SSL_NOTHING;
     }
 
     if (SSL_IS_TLS13(s)) {
diff --git a/util/libssl.num b/util/libssl.num
index 297522c..866b462 100644
--- a/util/libssl.num
+++ b/util/libssl.num
@@ -498,3 +498,4 @@ SSL_CTX_get_recv_max_early_data         498	1_1_1	EXIST::FUNCTION:
 SSL_CTX_set_recv_max_early_data         499	1_1_1	EXIST::FUNCTION:
 SSL_CTX_set_post_handshake_auth         500	1_1_1	EXIST::FUNCTION:
 SSL_get_signature_type_nid              501	1_1_1a	EXIST::FUNCTION:
+SSL_magic_pending_session_ptr           999	1_1_1a	EXIST::FUNCTION:
